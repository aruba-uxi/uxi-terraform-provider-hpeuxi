/*
Copyright 2025 Hewlett Packard Enterprise Development LP.
*/

/*
HPE Aruba Networking UXI Configuration

This document outlines the API contracts for HPE Aruba Networking UXI.

API version: 6.7.0
Contact: support@capenetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SensorGroupAssignmentPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorGroupAssignmentPostRequest{}

// SensorGroupAssignmentPostRequest struct for SensorGroupAssignmentPostRequest
type SensorGroupAssignmentPostRequest struct {
	// The unique identifier of the group
	GroupId string `json:"groupId"`
	// The unique identifier of the sensor
	SensorId string `json:"sensorId"`
}

type _SensorGroupAssignmentPostRequest SensorGroupAssignmentPostRequest

// NewSensorGroupAssignmentPostRequest instantiates a new SensorGroupAssignmentPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorGroupAssignmentPostRequest(
	groupId string,
	sensorId string,
) *SensorGroupAssignmentPostRequest {
	this := SensorGroupAssignmentPostRequest{}
	this.GroupId = groupId
	this.SensorId = sensorId
	return &this
}

// NewSensorGroupAssignmentPostRequestWithDefaults instantiates a new SensorGroupAssignmentPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorGroupAssignmentPostRequestWithDefaults() *SensorGroupAssignmentPostRequest {
	this := SensorGroupAssignmentPostRequest{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *SensorGroupAssignmentPostRequest) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentPostRequest) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *SensorGroupAssignmentPostRequest) SetGroupId(v string) {
	o.GroupId = v
}

// GetSensorId returns the SensorId field value
func (o *SensorGroupAssignmentPostRequest) GetSensorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentPostRequest) GetSensorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorId, true
}

// SetSensorId sets field value
func (o *SensorGroupAssignmentPostRequest) SetSensorId(v string) {
	o.SensorId = v
}

func (o SensorGroupAssignmentPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorGroupAssignmentPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupId"] = o.GroupId
	toSerialize["sensorId"] = o.SensorId
	return toSerialize, nil
}

func (o *SensorGroupAssignmentPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupId",
		"sensorId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorGroupAssignmentPostRequest := _SensorGroupAssignmentPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensorGroupAssignmentPostRequest)

	if err != nil {
		return err
	}

	*o = SensorGroupAssignmentPostRequest(varSensorGroupAssignmentPostRequest)

	return err
}

type NullableSensorGroupAssignmentPostRequest struct {
	value *SensorGroupAssignmentPostRequest
	isSet bool
}

func (v NullableSensorGroupAssignmentPostRequest) Get() *SensorGroupAssignmentPostRequest {
	return v.value
}

func (v *NullableSensorGroupAssignmentPostRequest) Set(val *SensorGroupAssignmentPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorGroupAssignmentPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorGroupAssignmentPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorGroupAssignmentPostRequest(
	val *SensorGroupAssignmentPostRequest,
) *NullableSensorGroupAssignmentPostRequest {
	return &NullableSensorGroupAssignmentPostRequest{value: val, isSet: true}
}

func (v NullableSensorGroupAssignmentPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorGroupAssignmentPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
