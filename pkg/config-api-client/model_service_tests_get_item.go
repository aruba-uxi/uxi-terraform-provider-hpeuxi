/*
Copyright 2025 Hewlett Packard Enterprise Development LP.
*/

/*
HPE Aruba Networking UXI Configuration

This document outlines the API contracts for HPE Aruba Networking UXI.

API version: 6.7.0
Contact: support@capenetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServiceTestsGetItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTestsGetItem{}

// ServiceTestsGetItem struct for ServiceTestsGetItem
type ServiceTestsGetItem struct {
	// The unique identifier of the service test
	Id string `json:"id"`
	// The category of the service test
	Category string `json:"category"`
	// The name of the service test
	Name   string         `json:"name"`
	Target NullableString `json:"target"`
	// The template of the service test
	Template string `json:"template"`
	// Indicates if the service test is enabled
	IsEnabled bool `json:"isEnabled"`
	// The type of the resource.
	Type string `json:"type"`
}

type _ServiceTestsGetItem ServiceTestsGetItem

// NewServiceTestsGetItem instantiates a new ServiceTestsGetItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTestsGetItem(
	id string,
	category string,
	name string,
	target NullableString,
	template string,
	isEnabled bool,
	type_ string,
) *ServiceTestsGetItem {
	this := ServiceTestsGetItem{}
	this.Id = id
	this.Category = category
	this.Name = name
	this.Target = target
	this.Template = template
	this.IsEnabled = isEnabled
	this.Type = type_
	return &this
}

// NewServiceTestsGetItemWithDefaults instantiates a new ServiceTestsGetItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTestsGetItemWithDefaults() *ServiceTestsGetItem {
	this := ServiceTestsGetItem{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceTestsGetItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceTestsGetItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceTestsGetItem) SetId(v string) {
	o.Id = v
}

// GetCategory returns the Category field value
func (o *ServiceTestsGetItem) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ServiceTestsGetItem) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ServiceTestsGetItem) SetCategory(v string) {
	o.Category = v
}

// GetName returns the Name field value
func (o *ServiceTestsGetItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceTestsGetItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceTestsGetItem) SetName(v string) {
	o.Name = v
}

// GetTarget returns the Target field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ServiceTestsGetItem) GetTarget() string {
	if o == nil || o.Target.Get() == nil {
		var ret string
		return ret
	}

	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTestsGetItem) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// SetTarget sets field value
func (o *ServiceTestsGetItem) SetTarget(v string) {
	o.Target.Set(&v)
}

// GetTemplate returns the Template field value
func (o *ServiceTestsGetItem) GetTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *ServiceTestsGetItem) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *ServiceTestsGetItem) SetTemplate(v string) {
	o.Template = v
}

// GetIsEnabled returns the IsEnabled field value
func (o *ServiceTestsGetItem) GetIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
func (o *ServiceTestsGetItem) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEnabled, true
}

// SetIsEnabled sets field value
func (o *ServiceTestsGetItem) SetIsEnabled(v bool) {
	o.IsEnabled = v
}

// GetType returns the Type field value
func (o *ServiceTestsGetItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServiceTestsGetItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServiceTestsGetItem) SetType(v string) {
	o.Type = v
}

func (o ServiceTestsGetItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTestsGetItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["category"] = o.Category
	toSerialize["name"] = o.Name
	toSerialize["target"] = o.Target.Get()
	toSerialize["template"] = o.Template
	toSerialize["isEnabled"] = o.IsEnabled
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ServiceTestsGetItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"category",
		"name",
		"target",
		"template",
		"isEnabled",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceTestsGetItem := _ServiceTestsGetItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceTestsGetItem)

	if err != nil {
		return err
	}

	*o = ServiceTestsGetItem(varServiceTestsGetItem)

	return err
}

type NullableServiceTestsGetItem struct {
	value *ServiceTestsGetItem
	isSet bool
}

func (v NullableServiceTestsGetItem) Get() *ServiceTestsGetItem {
	return v.value
}

func (v *NullableServiceTestsGetItem) Set(val *ServiceTestsGetItem) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTestsGetItem) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTestsGetItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTestsGetItem(val *ServiceTestsGetItem) *NullableServiceTestsGetItem {
	return &NullableServiceTestsGetItem{value: val, isSet: true}
}

func (v NullableServiceTestsGetItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTestsGetItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
